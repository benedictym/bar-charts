/**
 * Color space data and conversions
 *
 * @module color-space
 *
 */
'use strict';


/** Exported spaces */
var spaces = {
	rgb: require('color-space/rgb'),
	hsl: require('color-space/hsl'),
	hsv: require('color-space/hsv'),
	hsi: require('color-space/hsi'),
	hwb: require('color-space/hwb'),
	cmyk: require('color-space/cmyk'),
	cmy: require('color-space/cmy'),
	xyz: require('color-space/xyz'),
	xyy: require('color-space/xyy'),
	yiq: require('color-space/yiq'),
	yuv: require('color-space/yuv'),
	ydbdr: require('color-space/ydbdr'),
	ycgco: require('color-space/ycgco'),
	ypbpr: require('color-space/ypbpr'),
	ycbcr: require('color-space/ycbcr'),
	xvycc: require('color-space/xvycc'),
	yccbccrc: require('color-space/yccbccrc'),
	ucs: require('color-space/ucs'),
	uvw: require('color-space/uvw'),
	jpeg: require('color-space/jpeg'),
	lab: require('color-space/lab'),
	labh: require('color-space/labh'),
	lms: require('color-space/lms'),
	lchab: require('color-space/lchab'),
	luv: require('color-space/luv'),
	lchuv: require('color-space/lchuv'),
	hsluv: require('color-space/hsluv'),
	hpluv: require('color-space/hpluv'),
	cubehelix: require('color-space/cubehelix'),
	coloroid: require('color-space/coloroid'),
	hcg: require('color-space/hcg'),
	hcy: require('color-space/hcy'),
	tsl: require('color-space/tsl'),
	yes: require('color-space/yes'),
	osaucs: require('color-space/osaucs'),
	hsp: require('color-space/hsp')
};



//build absent convertors from each to every space
var fromSpace;
for (var fromSpaceName in spaces) {
	fromSpace = spaces[fromSpaceName];
	for (var toSpaceName in spaces) {
		if (!fromSpace[toSpaceName]) fromSpace[toSpaceName] = getConvertor(fromSpaceName, toSpaceName);
	}
}


/** return converter through xyz/rgb space */
function getConvertor(fromSpaceName, toSpaceName){
	var fromSpace = spaces[fromSpaceName];

	//create straight converter
	if (fromSpaceName === toSpaceName) {
		return function (a) {
			return a;
		};
	}

	//create xyz converter, if available
	else if (fromSpace.xyz && spaces.xyz[toSpaceName]) {
		return function(arg){
			return spaces.xyz[toSpaceName](fromSpace.xyz(arg));
		};
	}
	//create rgb converter
	else if (fromSpace.rgb && spaces.rgb[toSpaceName]) {
		return function(arg){
			return spaces.rgb[toSpaceName](fromSpace.rgb(arg));
		};
	}
}


module.exports = spaces;
